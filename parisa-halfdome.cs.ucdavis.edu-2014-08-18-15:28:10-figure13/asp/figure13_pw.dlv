%%% Max Number of Euler Regions
#maxint=64.

%%% Euler Regions
r(M):- #int(M),M>=1,M<=#maxint.

%%% Concepts
tax(t2006,0).
concept2(A, B) :- concept(A,B,_).
concept2(c2006_PcarPeve,0).
concept2(c2006_PER,0).
concept(c2006_Prectir,0,0).
concept(c2006_PHY,0,1).
concept(c2006_Pevelyn,0,2).
concept2(c2006_PHYLLO,0).
concept(c2006_Pcarlud,0,3).
tax(t2013,1).
concept2(A, B) :- concept(A,B,_).
concept2(c2013_PcarPspi,1).
concept(c2013_Ppubico,1,0).
concept2(c2013_PevePspi,1).
concept(c2013_ncPHY,1,1).
concept(c2013_Pevelyn,1,2).
concept2(c2013_PcarPsul,1).
concept(c2013_Psalpin,1,3).
concept2(c2013_PER,1).
concept(c2013_Prectir,1,4).
concept2(c2013_PevePvar,1).
concept2(c2013_PHY,1).
concept(c2013_Psulcat,1,5).
concept(c2013_Pvariab,1,6).
concept(c2013_Pspinot,1,7).
concept(c2013_Psplend,1,8).
concept(c2013_PHYsubcin,1,9).
concept2(c2013_PbivPspi,1).
concept2(c2013_PHYLLO,1).
concept(c2013_Pcarlud,1,10).
concept2(c2013_PsalPspi,1).
concept(c2013_Pbivent,1,11).

%%% Euler Bit
bit(M, 0, V):-r(M),M1=M/1, #mod(M1,5,V).
bit(M, 1, V):-r(M),M1=M/5, #mod(M1,13,V).


%%% Meaning of regions
in(X, M) :- r(M),concept(X,T,N),N1=N+1,bit(M,T,N1).
out(X, M) :- r(M),concept(X,T,N),N1=N+1,not bit(M,T,N1).
in(X, M) :- r(M),concept2(X,_),not out(X, M).
out(X, M) :- out3(X, M, _), ix.
irs(M) :- in(X, M), out(X, M), r(M), concept2(X,_).

%%% Constraints of regions.
irs(X) :- ir(X, _).
vrs(X) :- vr(X, _).
vr(X, X) :- not irs(X), r(X).
ir(X, X) :- not vrs(X), r(X).
ie(prod(A,B)) :- vr(X, A), ir(X, B), ix.
:- vrs(X), irs(X), pw.

%%% Inconsistency Explanation.
ie(s(R, A, Y)) :- pie(R, A, Y), not cc(R, Y), ix.
cc(R, Y) :- c(R, _, Y), ix.

%%% Parent-Child relations
%% ISA
% c2006_PHY isa c2006_PHYLLO
ir(X, r0) :- in(c2006_PHY, X), out(c2006_PHYLLO, X), pw.
ir(X, prod(r0,R)) :- in(c2006_PHY,X), out3(c2006_PHYLLO, X, R), ix.
:- #count{X: vrs(X), in(c2006_PHY, X), in(c2006_PHYLLO, X)} = 0, pw.
pie(r0, A, 1) :- ir(X, A), in(c2006_PHY, X), in(c2006_PHYLLO, X), ix.
c(r0, A, 1) :- vr(X, A), in(c2006_PHY, X), in(c2006_PHYLLO, X), ix.

% c2006_PER isa c2006_PHYLLO
ir(X, r1) :- in(c2006_PER, X), out(c2006_PHYLLO, X), pw.
ir(X, prod(r1,R)) :- in(c2006_PER,X), out3(c2006_PHYLLO, X, R), ix.
:- #count{X: vrs(X), in(c2006_PER, X), in(c2006_PHYLLO, X)} = 0, pw.
pie(r1, A, 1) :- ir(X, A), in(c2006_PER, X), in(c2006_PHYLLO, X), ix.
c(r1, A, 1) :- vr(X, A), in(c2006_PER, X), in(c2006_PHYLLO, X), ix.

%% coverage
out3(c2006_PHYLLO, X, r2) :- out(c2006_PHY, X), out(c2006_PER, X), ix.
out(c2006_PHYLLO, X) :- out(c2006_PHY, X), out(c2006_PER, X), pw.
%% sibling disjointness
% c2006_PHY ! c2006_PER
ir(X, r3) :- in(c2006_PHY, X), in(c2006_PER, X).
:- #count{X: vrs(X), in(c2006_PHY, X), out(c2006_PER, X)} = 0, pw.
:- #count{X: vrs(X), out(c2006_PHY, X), in(c2006_PER, X)} = 0, pw.
pie(r3, A, 1) :- ir(X, A), in(c2006_PHY, X), out(c2006_PER, X), ix.
c(r3, A, 1) :- vr(X, A), in(c2006_PHY, X), out(c2006_PER, X), ix.
pie(r3, A, 2) :- ir(X, A), out(c2006_PHY, X), in(c2006_PER, X), ix.
c(r3, A, 2) :- vr(X, A), out(c2006_PHY, X), in(c2006_PER, X), ix.

%% ISA
% c2006_Prectir isa c2006_PER
ir(X, r4) :- in(c2006_Prectir, X), out(c2006_PER, X), pw.
ir(X, prod(r4,R)) :- in(c2006_Prectir,X), out3(c2006_PER, X, R), ix.
:- #count{X: vrs(X), in(c2006_Prectir, X), in(c2006_PER, X)} = 0, pw.
pie(r4, A, 1) :- ir(X, A), in(c2006_Prectir, X), in(c2006_PER, X), ix.
c(r4, A, 1) :- vr(X, A), in(c2006_Prectir, X), in(c2006_PER, X), ix.

% c2006_PcarPeve isa c2006_PER
ir(X, r5) :- in(c2006_PcarPeve, X), out(c2006_PER, X), pw.
ir(X, prod(r5,R)) :- in(c2006_PcarPeve,X), out3(c2006_PER, X, R), ix.
:- #count{X: vrs(X), in(c2006_PcarPeve, X), in(c2006_PER, X)} = 0, pw.
pie(r5, A, 1) :- ir(X, A), in(c2006_PcarPeve, X), in(c2006_PER, X), ix.
c(r5, A, 1) :- vr(X, A), in(c2006_PcarPeve, X), in(c2006_PER, X), ix.

%% coverage
out3(c2006_PER, X, r6) :- out(c2006_Prectir, X), out(c2006_PcarPeve, X), ix.
out(c2006_PER, X) :- out(c2006_Prectir, X), out(c2006_PcarPeve, X), pw.
%% sibling disjointness
% c2006_Prectir ! c2006_PcarPeve
ir(X, r7) :- in(c2006_Prectir, X), in(c2006_PcarPeve, X).
:- #count{X: vrs(X), in(c2006_Prectir, X), out(c2006_PcarPeve, X)} = 0, pw.
:- #count{X: vrs(X), out(c2006_Prectir, X), in(c2006_PcarPeve, X)} = 0, pw.
pie(r7, A, 1) :- ir(X, A), in(c2006_Prectir, X), out(c2006_PcarPeve, X), ix.
c(r7, A, 1) :- vr(X, A), in(c2006_Prectir, X), out(c2006_PcarPeve, X), ix.
pie(r7, A, 2) :- ir(X, A), out(c2006_Prectir, X), in(c2006_PcarPeve, X), ix.
c(r7, A, 2) :- vr(X, A), out(c2006_Prectir, X), in(c2006_PcarPeve, X), ix.

%% ISA
% c2006_Pcarlud isa c2006_PcarPeve
ir(X, r8) :- in(c2006_Pcarlud, X), out(c2006_PcarPeve, X), pw.
ir(X, prod(r8,R)) :- in(c2006_Pcarlud,X), out3(c2006_PcarPeve, X, R), ix.
:- #count{X: vrs(X), in(c2006_Pcarlud, X), in(c2006_PcarPeve, X)} = 0, pw.
pie(r8, A, 1) :- ir(X, A), in(c2006_Pcarlud, X), in(c2006_PcarPeve, X), ix.
c(r8, A, 1) :- vr(X, A), in(c2006_Pcarlud, X), in(c2006_PcarPeve, X), ix.

% c2006_Pevelyn isa c2006_PcarPeve
ir(X, r9) :- in(c2006_Pevelyn, X), out(c2006_PcarPeve, X), pw.
ir(X, prod(r9,R)) :- in(c2006_Pevelyn,X), out3(c2006_PcarPeve, X, R), ix.
:- #count{X: vrs(X), in(c2006_Pevelyn, X), in(c2006_PcarPeve, X)} = 0, pw.
pie(r9, A, 1) :- ir(X, A), in(c2006_Pevelyn, X), in(c2006_PcarPeve, X), ix.
c(r9, A, 1) :- vr(X, A), in(c2006_Pevelyn, X), in(c2006_PcarPeve, X), ix.

%% coverage
out3(c2006_PcarPeve, X, r10) :- out(c2006_Pcarlud, X), out(c2006_Pevelyn, X), ix.
out(c2006_PcarPeve, X) :- out(c2006_Pcarlud, X), out(c2006_Pevelyn, X), pw.
%% sibling disjointness
% c2006_Pcarlud ! c2006_Pevelyn
ir(X, r11) :- in(c2006_Pcarlud, X), in(c2006_Pevelyn, X).
:- #count{X: vrs(X), in(c2006_Pcarlud, X), out(c2006_Pevelyn, X)} = 0, pw.
:- #count{X: vrs(X), out(c2006_Pcarlud, X), in(c2006_Pevelyn, X)} = 0, pw.
pie(r11, A, 1) :- ir(X, A), in(c2006_Pcarlud, X), out(c2006_Pevelyn, X), ix.
c(r11, A, 1) :- vr(X, A), in(c2006_Pcarlud, X), out(c2006_Pevelyn, X), ix.
pie(r11, A, 2) :- ir(X, A), out(c2006_Pcarlud, X), in(c2006_Pevelyn, X), ix.
c(r11, A, 2) :- vr(X, A), out(c2006_Pcarlud, X), in(c2006_Pevelyn, X), ix.

%% ISA
% c2013_PHY isa c2013_PHYLLO
ir(X, r12) :- in(c2013_PHY, X), out(c2013_PHYLLO, X), pw.
ir(X, prod(r12,R)) :- in(c2013_PHY,X), out3(c2013_PHYLLO, X, R), ix.
:- #count{X: vrs(X), in(c2013_PHY, X), in(c2013_PHYLLO, X)} = 0, pw.
pie(r12, A, 1) :- ir(X, A), in(c2013_PHY, X), in(c2013_PHYLLO, X), ix.
c(r12, A, 1) :- vr(X, A), in(c2013_PHY, X), in(c2013_PHYLLO, X), ix.

% c2013_PER isa c2013_PHYLLO
ir(X, r13) :- in(c2013_PER, X), out(c2013_PHYLLO, X), pw.
ir(X, prod(r13,R)) :- in(c2013_PER,X), out3(c2013_PHYLLO, X, R), ix.
:- #count{X: vrs(X), in(c2013_PER, X), in(c2013_PHYLLO, X)} = 0, pw.
pie(r13, A, 1) :- ir(X, A), in(c2013_PER, X), in(c2013_PHYLLO, X), ix.
c(r13, A, 1) :- vr(X, A), in(c2013_PER, X), in(c2013_PHYLLO, X), ix.

%% coverage
out3(c2013_PHYLLO, X, r14) :- out(c2013_PHY, X), out(c2013_PER, X), ix.
out(c2013_PHYLLO, X) :- out(c2013_PHY, X), out(c2013_PER, X), pw.
%% sibling disjointness
% c2013_PHY ! c2013_PER
ir(X, r15) :- in(c2013_PHY, X), in(c2013_PER, X).
:- #count{X: vrs(X), in(c2013_PHY, X), out(c2013_PER, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PHY, X), in(c2013_PER, X)} = 0, pw.
pie(r15, A, 1) :- ir(X, A), in(c2013_PHY, X), out(c2013_PER, X), ix.
c(r15, A, 1) :- vr(X, A), in(c2013_PHY, X), out(c2013_PER, X), ix.
pie(r15, A, 2) :- ir(X, A), out(c2013_PHY, X), in(c2013_PER, X), ix.
c(r15, A, 2) :- vr(X, A), out(c2013_PHY, X), in(c2013_PER, X), ix.

%% ISA
% c2013_PHYsubcin isa c2013_PHY
ir(X, r16) :- in(c2013_PHYsubcin, X), out(c2013_PHY, X), pw.
ir(X, prod(r16,R)) :- in(c2013_PHYsubcin,X), out3(c2013_PHY, X, R), ix.
:- #count{X: vrs(X), in(c2013_PHYsubcin, X), in(c2013_PHY, X)} = 0, pw.
pie(r16, A, 1) :- ir(X, A), in(c2013_PHYsubcin, X), in(c2013_PHY, X), ix.
c(r16, A, 1) :- vr(X, A), in(c2013_PHYsubcin, X), in(c2013_PHY, X), ix.

% c2013_ncPHY isa c2013_PHY
ir(X, r17) :- in(c2013_ncPHY, X), out(c2013_PHY, X), pw.
ir(X, prod(r17,R)) :- in(c2013_ncPHY,X), out3(c2013_PHY, X, R), ix.
%% coverage
out3(c2013_PHY, X, r18) :- out(c2013_PHYsubcin, X), out(c2013_ncPHY, X), ix.
out(c2013_PHY, X) :- out(c2013_PHYsubcin, X), out(c2013_ncPHY, X), pw.
%% sibling disjointness
% c2013_PHYsubcin ! c2013_ncPHY
ir(X, r19) :- in(c2013_PHYsubcin, X), in(c2013_ncPHY, X).
:- #count{X: vrs(X), in(c2013_PHYsubcin, X), out(c2013_ncPHY, X)} = 0, pw.
pie(r19, A, 1) :- ir(X, A), in(c2013_PHYsubcin, X), out(c2013_ncPHY, X), ix.
c(r19, A, 1) :- vr(X, A), in(c2013_PHYsubcin, X), out(c2013_ncPHY, X), ix.
%% ISA
% c2013_Prectir isa c2013_PER
ir(X, r20) :- in(c2013_Prectir, X), out(c2013_PER, X), pw.
ir(X, prod(r20,R)) :- in(c2013_Prectir,X), out3(c2013_PER, X, R), ix.
:- #count{X: vrs(X), in(c2013_Prectir, X), in(c2013_PER, X)} = 0, pw.
pie(r20, A, 1) :- ir(X, A), in(c2013_Prectir, X), in(c2013_PER, X), ix.
c(r20, A, 1) :- vr(X, A), in(c2013_Prectir, X), in(c2013_PER, X), ix.

% c2013_PevePspi isa c2013_PER
ir(X, r21) :- in(c2013_PevePspi, X), out(c2013_PER, X), pw.
ir(X, prod(r21,R)) :- in(c2013_PevePspi,X), out3(c2013_PER, X, R), ix.
:- #count{X: vrs(X), in(c2013_PevePspi, X), in(c2013_PER, X)} = 0, pw.
pie(r21, A, 1) :- ir(X, A), in(c2013_PevePspi, X), in(c2013_PER, X), ix.
c(r21, A, 1) :- vr(X, A), in(c2013_PevePspi, X), in(c2013_PER, X), ix.

%% coverage
out3(c2013_PER, X, r22) :- out(c2013_Prectir, X), out(c2013_PevePspi, X), ix.
out(c2013_PER, X) :- out(c2013_Prectir, X), out(c2013_PevePspi, X), pw.
%% sibling disjointness
% c2013_Prectir ! c2013_PevePspi
ir(X, r23) :- in(c2013_Prectir, X), in(c2013_PevePspi, X).
:- #count{X: vrs(X), in(c2013_Prectir, X), out(c2013_PevePspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Prectir, X), in(c2013_PevePspi, X)} = 0, pw.
pie(r23, A, 1) :- ir(X, A), in(c2013_Prectir, X), out(c2013_PevePspi, X), ix.
c(r23, A, 1) :- vr(X, A), in(c2013_Prectir, X), out(c2013_PevePspi, X), ix.
pie(r23, A, 2) :- ir(X, A), out(c2013_Prectir, X), in(c2013_PevePspi, X), ix.
c(r23, A, 2) :- vr(X, A), out(c2013_Prectir, X), in(c2013_PevePspi, X), ix.

%% ISA
% c2013_PevePvar isa c2013_PevePspi
ir(X, r24) :- in(c2013_PevePvar, X), out(c2013_PevePspi, X), pw.
ir(X, prod(r24,R)) :- in(c2013_PevePvar,X), out3(c2013_PevePspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_PevePvar, X), in(c2013_PevePspi, X)} = 0, pw.
pie(r24, A, 1) :- ir(X, A), in(c2013_PevePvar, X), in(c2013_PevePspi, X), ix.
c(r24, A, 1) :- vr(X, A), in(c2013_PevePvar, X), in(c2013_PevePspi, X), ix.

% c2013_PbivPspi isa c2013_PevePspi
ir(X, r25) :- in(c2013_PbivPspi, X), out(c2013_PevePspi, X), pw.
ir(X, prod(r25,R)) :- in(c2013_PbivPspi,X), out3(c2013_PevePspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_PbivPspi, X), in(c2013_PevePspi, X)} = 0, pw.
pie(r25, A, 1) :- ir(X, A), in(c2013_PbivPspi, X), in(c2013_PevePspi, X), ix.
c(r25, A, 1) :- vr(X, A), in(c2013_PbivPspi, X), in(c2013_PevePspi, X), ix.

%% coverage
out3(c2013_PevePspi, X, r26) :- out(c2013_PevePvar, X), out(c2013_PbivPspi, X), ix.
out(c2013_PevePspi, X) :- out(c2013_PevePvar, X), out(c2013_PbivPspi, X), pw.
%% sibling disjointness
% c2013_PevePvar ! c2013_PbivPspi
ir(X, r27) :- in(c2013_PevePvar, X), in(c2013_PbivPspi, X).
:- #count{X: vrs(X), in(c2013_PevePvar, X), out(c2013_PbivPspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PevePvar, X), in(c2013_PbivPspi, X)} = 0, pw.
pie(r27, A, 1) :- ir(X, A), in(c2013_PevePvar, X), out(c2013_PbivPspi, X), ix.
c(r27, A, 1) :- vr(X, A), in(c2013_PevePvar, X), out(c2013_PbivPspi, X), ix.
pie(r27, A, 2) :- ir(X, A), out(c2013_PevePvar, X), in(c2013_PbivPspi, X), ix.
c(r27, A, 2) :- vr(X, A), out(c2013_PevePvar, X), in(c2013_PbivPspi, X), ix.

%% ISA
% c2013_Pevelyn isa c2013_PevePvar
ir(X, r28) :- in(c2013_Pevelyn, X), out(c2013_PevePvar, X), pw.
ir(X, prod(r28,R)) :- in(c2013_Pevelyn,X), out3(c2013_PevePvar, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pevelyn, X), in(c2013_PevePvar, X)} = 0, pw.
pie(r28, A, 1) :- ir(X, A), in(c2013_Pevelyn, X), in(c2013_PevePvar, X), ix.
c(r28, A, 1) :- vr(X, A), in(c2013_Pevelyn, X), in(c2013_PevePvar, X), ix.

% c2013_Pvariab isa c2013_PevePvar
ir(X, r29) :- in(c2013_Pvariab, X), out(c2013_PevePvar, X), pw.
ir(X, prod(r29,R)) :- in(c2013_Pvariab,X), out3(c2013_PevePvar, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pvariab, X), in(c2013_PevePvar, X)} = 0, pw.
pie(r29, A, 1) :- ir(X, A), in(c2013_Pvariab, X), in(c2013_PevePvar, X), ix.
c(r29, A, 1) :- vr(X, A), in(c2013_Pvariab, X), in(c2013_PevePvar, X), ix.

%% coverage
out3(c2013_PevePvar, X, r30) :- out(c2013_Pevelyn, X), out(c2013_Pvariab, X), ix.
out(c2013_PevePvar, X) :- out(c2013_Pevelyn, X), out(c2013_Pvariab, X), pw.
%% sibling disjointness
% c2013_Pevelyn ! c2013_Pvariab
ir(X, r31) :- in(c2013_Pevelyn, X), in(c2013_Pvariab, X).
:- #count{X: vrs(X), in(c2013_Pevelyn, X), out(c2013_Pvariab, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pevelyn, X), in(c2013_Pvariab, X)} = 0, pw.
pie(r31, A, 1) :- ir(X, A), in(c2013_Pevelyn, X), out(c2013_Pvariab, X), ix.
c(r31, A, 1) :- vr(X, A), in(c2013_Pevelyn, X), out(c2013_Pvariab, X), ix.
pie(r31, A, 2) :- ir(X, A), out(c2013_Pevelyn, X), in(c2013_Pvariab, X), ix.
c(r31, A, 2) :- vr(X, A), out(c2013_Pevelyn, X), in(c2013_Pvariab, X), ix.

%% ISA
% c2013_Pbivent isa c2013_PbivPspi
ir(X, r32) :- in(c2013_Pbivent, X), out(c2013_PbivPspi, X), pw.
ir(X, prod(r32,R)) :- in(c2013_Pbivent,X), out3(c2013_PbivPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pbivent, X), in(c2013_PbivPspi, X)} = 0, pw.
pie(r32, A, 1) :- ir(X, A), in(c2013_Pbivent, X), in(c2013_PbivPspi, X), ix.
c(r32, A, 1) :- vr(X, A), in(c2013_Pbivent, X), in(c2013_PbivPspi, X), ix.

% c2013_Psplend isa c2013_PbivPspi
ir(X, r33) :- in(c2013_Psplend, X), out(c2013_PbivPspi, X), pw.
ir(X, prod(r33,R)) :- in(c2013_Psplend,X), out3(c2013_PbivPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_Psplend, X), in(c2013_PbivPspi, X)} = 0, pw.
pie(r33, A, 1) :- ir(X, A), in(c2013_Psplend, X), in(c2013_PbivPspi, X), ix.
c(r33, A, 1) :- vr(X, A), in(c2013_Psplend, X), in(c2013_PbivPspi, X), ix.

% c2013_PcarPspi isa c2013_PbivPspi
ir(X, r34) :- in(c2013_PcarPspi, X), out(c2013_PbivPspi, X), pw.
ir(X, prod(r34,R)) :- in(c2013_PcarPspi,X), out3(c2013_PbivPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_PcarPspi, X), in(c2013_PbivPspi, X)} = 0, pw.
pie(r34, A, 1) :- ir(X, A), in(c2013_PcarPspi, X), in(c2013_PbivPspi, X), ix.
c(r34, A, 1) :- vr(X, A), in(c2013_PcarPspi, X), in(c2013_PbivPspi, X), ix.

%% coverage
out3(c2013_PbivPspi, X, r35) :- out(c2013_Pbivent, X), out(c2013_Psplend, X), out(c2013_PcarPspi, X), ix.
out(c2013_PbivPspi, X) :- out(c2013_Pbivent, X), out(c2013_Psplend, X), out(c2013_PcarPspi, X), pw.
%% sibling disjointness
% c2013_Pbivent ! c2013_Psplend
ir(X, r36) :- in(c2013_Pbivent, X), in(c2013_Psplend, X).
:- #count{X: vrs(X), in(c2013_Pbivent, X), out(c2013_Psplend, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pbivent, X), in(c2013_Psplend, X)} = 0, pw.
pie(r36, A, 1) :- ir(X, A), in(c2013_Pbivent, X), out(c2013_Psplend, X), ix.
c(r36, A, 1) :- vr(X, A), in(c2013_Pbivent, X), out(c2013_Psplend, X), ix.
pie(r36, A, 2) :- ir(X, A), out(c2013_Pbivent, X), in(c2013_Psplend, X), ix.
c(r36, A, 2) :- vr(X, A), out(c2013_Pbivent, X), in(c2013_Psplend, X), ix.

% c2013_Pbivent ! c2013_PcarPspi
ir(X, r37) :- in(c2013_Pbivent, X), in(c2013_PcarPspi, X).
:- #count{X: vrs(X), in(c2013_Pbivent, X), out(c2013_PcarPspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pbivent, X), in(c2013_PcarPspi, X)} = 0, pw.
pie(r37, A, 1) :- ir(X, A), in(c2013_Pbivent, X), out(c2013_PcarPspi, X), ix.
c(r37, A, 1) :- vr(X, A), in(c2013_Pbivent, X), out(c2013_PcarPspi, X), ix.
pie(r37, A, 2) :- ir(X, A), out(c2013_Pbivent, X), in(c2013_PcarPspi, X), ix.
c(r37, A, 2) :- vr(X, A), out(c2013_Pbivent, X), in(c2013_PcarPspi, X), ix.

% c2013_Psplend ! c2013_PcarPspi
ir(X, r38) :- in(c2013_Psplend, X), in(c2013_PcarPspi, X).
:- #count{X: vrs(X), in(c2013_Psplend, X), out(c2013_PcarPspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Psplend, X), in(c2013_PcarPspi, X)} = 0, pw.
pie(r38, A, 1) :- ir(X, A), in(c2013_Psplend, X), out(c2013_PcarPspi, X), ix.
c(r38, A, 1) :- vr(X, A), in(c2013_Psplend, X), out(c2013_PcarPspi, X), ix.
pie(r38, A, 2) :- ir(X, A), out(c2013_Psplend, X), in(c2013_PcarPspi, X), ix.
c(r38, A, 2) :- vr(X, A), out(c2013_Psplend, X), in(c2013_PcarPspi, X), ix.

%% ISA
% c2013_PcarPsul isa c2013_PcarPspi
ir(X, r39) :- in(c2013_PcarPsul, X), out(c2013_PcarPspi, X), pw.
ir(X, prod(r39,R)) :- in(c2013_PcarPsul,X), out3(c2013_PcarPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_PcarPsul, X), in(c2013_PcarPspi, X)} = 0, pw.
pie(r39, A, 1) :- ir(X, A), in(c2013_PcarPsul, X), in(c2013_PcarPspi, X), ix.
c(r39, A, 1) :- vr(X, A), in(c2013_PcarPsul, X), in(c2013_PcarPspi, X), ix.

% c2013_Ppubico isa c2013_PcarPspi
ir(X, r40) :- in(c2013_Ppubico, X), out(c2013_PcarPspi, X), pw.
ir(X, prod(r40,R)) :- in(c2013_Ppubico,X), out3(c2013_PcarPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_Ppubico, X), in(c2013_PcarPspi, X)} = 0, pw.
pie(r40, A, 1) :- ir(X, A), in(c2013_Ppubico, X), in(c2013_PcarPspi, X), ix.
c(r40, A, 1) :- vr(X, A), in(c2013_Ppubico, X), in(c2013_PcarPspi, X), ix.

% c2013_PsalPspi isa c2013_PcarPspi
ir(X, r41) :- in(c2013_PsalPspi, X), out(c2013_PcarPspi, X), pw.
ir(X, prod(r41,R)) :- in(c2013_PsalPspi,X), out3(c2013_PcarPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_PsalPspi, X), in(c2013_PcarPspi, X)} = 0, pw.
pie(r41, A, 1) :- ir(X, A), in(c2013_PsalPspi, X), in(c2013_PcarPspi, X), ix.
c(r41, A, 1) :- vr(X, A), in(c2013_PsalPspi, X), in(c2013_PcarPspi, X), ix.

%% coverage
out3(c2013_PcarPspi, X, r42) :- out(c2013_PcarPsul, X), out(c2013_Ppubico, X), out(c2013_PsalPspi, X), ix.
out(c2013_PcarPspi, X) :- out(c2013_PcarPsul, X), out(c2013_Ppubico, X), out(c2013_PsalPspi, X), pw.
%% sibling disjointness
% c2013_PcarPsul ! c2013_Ppubico
ir(X, r43) :- in(c2013_PcarPsul, X), in(c2013_Ppubico, X).
:- #count{X: vrs(X), in(c2013_PcarPsul, X), out(c2013_Ppubico, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PcarPsul, X), in(c2013_Ppubico, X)} = 0, pw.
pie(r43, A, 1) :- ir(X, A), in(c2013_PcarPsul, X), out(c2013_Ppubico, X), ix.
c(r43, A, 1) :- vr(X, A), in(c2013_PcarPsul, X), out(c2013_Ppubico, X), ix.
pie(r43, A, 2) :- ir(X, A), out(c2013_PcarPsul, X), in(c2013_Ppubico, X), ix.
c(r43, A, 2) :- vr(X, A), out(c2013_PcarPsul, X), in(c2013_Ppubico, X), ix.

% c2013_PcarPsul ! c2013_PsalPspi
ir(X, r44) :- in(c2013_PcarPsul, X), in(c2013_PsalPspi, X).
:- #count{X: vrs(X), in(c2013_PcarPsul, X), out(c2013_PsalPspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PcarPsul, X), in(c2013_PsalPspi, X)} = 0, pw.
pie(r44, A, 1) :- ir(X, A), in(c2013_PcarPsul, X), out(c2013_PsalPspi, X), ix.
c(r44, A, 1) :- vr(X, A), in(c2013_PcarPsul, X), out(c2013_PsalPspi, X), ix.
pie(r44, A, 2) :- ir(X, A), out(c2013_PcarPsul, X), in(c2013_PsalPspi, X), ix.
c(r44, A, 2) :- vr(X, A), out(c2013_PcarPsul, X), in(c2013_PsalPspi, X), ix.

% c2013_Ppubico ! c2013_PsalPspi
ir(X, r45) :- in(c2013_Ppubico, X), in(c2013_PsalPspi, X).
:- #count{X: vrs(X), in(c2013_Ppubico, X), out(c2013_PsalPspi, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Ppubico, X), in(c2013_PsalPspi, X)} = 0, pw.
pie(r45, A, 1) :- ir(X, A), in(c2013_Ppubico, X), out(c2013_PsalPspi, X), ix.
c(r45, A, 1) :- vr(X, A), in(c2013_Ppubico, X), out(c2013_PsalPspi, X), ix.
pie(r45, A, 2) :- ir(X, A), out(c2013_Ppubico, X), in(c2013_PsalPspi, X), ix.
c(r45, A, 2) :- vr(X, A), out(c2013_Ppubico, X), in(c2013_PsalPspi, X), ix.

%% ISA
% c2013_Pcarlud isa c2013_PcarPsul
ir(X, r46) :- in(c2013_Pcarlud, X), out(c2013_PcarPsul, X), pw.
ir(X, prod(r46,R)) :- in(c2013_Pcarlud,X), out3(c2013_PcarPsul, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pcarlud, X), in(c2013_PcarPsul, X)} = 0, pw.
pie(r46, A, 1) :- ir(X, A), in(c2013_Pcarlud, X), in(c2013_PcarPsul, X), ix.
c(r46, A, 1) :- vr(X, A), in(c2013_Pcarlud, X), in(c2013_PcarPsul, X), ix.

% c2013_Psulcat isa c2013_PcarPsul
ir(X, r47) :- in(c2013_Psulcat, X), out(c2013_PcarPsul, X), pw.
ir(X, prod(r47,R)) :- in(c2013_Psulcat,X), out3(c2013_PcarPsul, X, R), ix.
:- #count{X: vrs(X), in(c2013_Psulcat, X), in(c2013_PcarPsul, X)} = 0, pw.
pie(r47, A, 1) :- ir(X, A), in(c2013_Psulcat, X), in(c2013_PcarPsul, X), ix.
c(r47, A, 1) :- vr(X, A), in(c2013_Psulcat, X), in(c2013_PcarPsul, X), ix.

%% coverage
out3(c2013_PcarPsul, X, r48) :- out(c2013_Pcarlud, X), out(c2013_Psulcat, X), ix.
out(c2013_PcarPsul, X) :- out(c2013_Pcarlud, X), out(c2013_Psulcat, X), pw.
%% sibling disjointness
% c2013_Pcarlud ! c2013_Psulcat
ir(X, r49) :- in(c2013_Pcarlud, X), in(c2013_Psulcat, X).
:- #count{X: vrs(X), in(c2013_Pcarlud, X), out(c2013_Psulcat, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pcarlud, X), in(c2013_Psulcat, X)} = 0, pw.
pie(r49, A, 1) :- ir(X, A), in(c2013_Pcarlud, X), out(c2013_Psulcat, X), ix.
c(r49, A, 1) :- vr(X, A), in(c2013_Pcarlud, X), out(c2013_Psulcat, X), ix.
pie(r49, A, 2) :- ir(X, A), out(c2013_Pcarlud, X), in(c2013_Psulcat, X), ix.
c(r49, A, 2) :- vr(X, A), out(c2013_Pcarlud, X), in(c2013_Psulcat, X), ix.

%% ISA
% c2013_Psalpin isa c2013_PsalPspi
ir(X, r50) :- in(c2013_Psalpin, X), out(c2013_PsalPspi, X), pw.
ir(X, prod(r50,R)) :- in(c2013_Psalpin,X), out3(c2013_PsalPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_Psalpin, X), in(c2013_PsalPspi, X)} = 0, pw.
pie(r50, A, 1) :- ir(X, A), in(c2013_Psalpin, X), in(c2013_PsalPspi, X), ix.
c(r50, A, 1) :- vr(X, A), in(c2013_Psalpin, X), in(c2013_PsalPspi, X), ix.

% c2013_Pspinot isa c2013_PsalPspi
ir(X, r51) :- in(c2013_Pspinot, X), out(c2013_PsalPspi, X), pw.
ir(X, prod(r51,R)) :- in(c2013_Pspinot,X), out3(c2013_PsalPspi, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pspinot, X), in(c2013_PsalPspi, X)} = 0, pw.
pie(r51, A, 1) :- ir(X, A), in(c2013_Pspinot, X), in(c2013_PsalPspi, X), ix.
c(r51, A, 1) :- vr(X, A), in(c2013_Pspinot, X), in(c2013_PsalPspi, X), ix.

%% coverage
out3(c2013_PsalPspi, X, r52) :- out(c2013_Psalpin, X), out(c2013_Pspinot, X), ix.
out(c2013_PsalPspi, X) :- out(c2013_Psalpin, X), out(c2013_Pspinot, X), pw.
%% sibling disjointness
% c2013_Psalpin ! c2013_Pspinot
ir(X, r53) :- in(c2013_Psalpin, X), in(c2013_Pspinot, X).
:- #count{X: vrs(X), in(c2013_Psalpin, X), out(c2013_Pspinot, X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Psalpin, X), in(c2013_Pspinot, X)} = 0, pw.
pie(r53, A, 1) :- ir(X, A), in(c2013_Psalpin, X), out(c2013_Pspinot, X), ix.
c(r53, A, 1) :- vr(X, A), in(c2013_Psalpin, X), out(c2013_Pspinot, X), ix.
pie(r53, A, 2) :- ir(X, A), out(c2013_Psalpin, X), in(c2013_Pspinot, X), ix.
c(r53, A, 2) :- vr(X, A), out(c2013_Psalpin, X), in(c2013_Pspinot, X), ix.


%%% Articulations
% 2013.PHYLLO includes 2006.PHYLLO
ir(X, r54) :- out(c2013_PHYLLO,X), in(c2006_PHYLLO,X), pw.
ir(X, prod(r54,R)) :- out3(c2013_PHYLLO, X, R), in(c2006_PHYLLO,X), ix.
:- #count{X: vrs(X), in(c2013_PHYLLO,X), in(c2006_PHYLLO,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PHYLLO,X), out(c2006_PHYLLO,X)} = 0, pw.
pie(r54, A, 1) :- ir(X, A), in(c2013_PHYLLO, X), out(c2006_PHYLLO, X), ix.
c(r54, A, 1) :- vr(X, A), in(c2013_PHYLLO, X), out(c2006_PHYLLO, X), ix.

pie(r54, A, 2) :- ir(X, A), in(c2013_PHYLLO, X), in(c2006_PHYLLO, X), ix.
c(r54, A, 2) :- vr(X, A), in(c2013_PHYLLO, X), in(c2006_PHYLLO, X), ix.


% 2013.PHY equals 2006.PHY
ir(X, r55) :- out(c2013_PHY,X), in(c2006_PHY,X).
ir(X, r55) :- in(c2013_PHY,X), out(c2006_PHY,X).
ir(X, prod(r55,R)) :- out3(c2013_PHY, X, R), in(c2006_PHY,X), ix.
ir(X, prod(r55,R)) :- in(c2013_PHY,X), out3(c2006_PHY, X, R), ix.
:- #count{X: vrs(X), in(c2013_PHY,X), in(c2006_PHY,X)} = 0, pw.
pie(r55, A, 1) :- ir(X, A), in(c2013_PHY, X), in(c2006_PHY, X), ix.
c(r55, A, 1) :- vr(X, A), in(c2013_PHY, X), in(c2006_PHY, X), ix.


% 2013.PHYsubcin is_included_in 2006.PHY
:- #count{X: vrs(X), in(c2013_PHYsubcin,X), in(c2006_PHY,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PHYsubcin,X), in(c2006_PHY,X)} = 0, pw.
ir(X, r56) :- in(c2013_PHYsubcin,X), out(c2006_PHY,X), pw.
pie(r56, A, 1) :- ir(X, A), out(c2013_PHYsubcin, X), in(c2006_PHY, X), ix.
c(r56, A, 1) :- vr(X, A), out(c2013_PHYsubcin, X), in(c2006_PHY, X), ix.

pie(r56, A, 2) :- ir(X, A), in(c2013_PHYsubcin, X), in(c2006_PHY, X), ix.
c(r56, A, 2) :- vr(X, A), in(c2013_PHYsubcin, X), in(c2006_PHY, X), ix.


% 2013.PER includes 2006.PER
ir(X, r57) :- out(c2013_PER,X), in(c2006_PER,X), pw.
ir(X, prod(r57,R)) :- out3(c2013_PER, X, R), in(c2006_PER,X), ix.
:- #count{X: vrs(X), in(c2013_PER,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PER,X), out(c2006_PER,X)} = 0, pw.
pie(r57, A, 1) :- ir(X, A), in(c2013_PER, X), out(c2006_PER, X), ix.
c(r57, A, 1) :- vr(X, A), in(c2013_PER, X), out(c2006_PER, X), ix.

pie(r57, A, 2) :- ir(X, A), in(c2013_PER, X), in(c2006_PER, X), ix.
c(r57, A, 2) :- vr(X, A), in(c2013_PER, X), in(c2006_PER, X), ix.


% 2013.Prectir equals 2006.Prectir
ir(X, r58) :- out(c2013_Prectir,X), in(c2006_Prectir,X).
ir(X, r58) :- in(c2013_Prectir,X), out(c2006_Prectir,X).
ir(X, prod(r58,R)) :- out3(c2013_Prectir, X, R), in(c2006_Prectir,X), ix.
ir(X, prod(r58,R)) :- in(c2013_Prectir,X), out3(c2006_Prectir, X, R), ix.
:- #count{X: vrs(X), in(c2013_Prectir,X), in(c2006_Prectir,X)} = 0, pw.
pie(r58, A, 1) :- ir(X, A), in(c2013_Prectir, X), in(c2006_Prectir, X), ix.
c(r58, A, 1) :- vr(X, A), in(c2013_Prectir, X), in(c2006_Prectir, X), ix.


% 2013.PevePspi includes 2006.PcarPeve
ir(X, r59) :- out(c2013_PevePspi,X), in(c2006_PcarPeve,X), pw.
ir(X, prod(r59,R)) :- out3(c2013_PevePspi, X, R), in(c2006_PcarPeve,X), ix.
:- #count{X: vrs(X), in(c2013_PevePspi,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PevePspi,X), out(c2006_PcarPeve,X)} = 0, pw.
pie(r59, A, 1) :- ir(X, A), in(c2013_PevePspi, X), out(c2006_PcarPeve, X), ix.
c(r59, A, 1) :- vr(X, A), in(c2013_PevePspi, X), out(c2006_PcarPeve, X), ix.

pie(r59, A, 2) :- ir(X, A), in(c2013_PevePspi, X), in(c2006_PcarPeve, X), ix.
c(r59, A, 2) :- vr(X, A), in(c2013_PevePspi, X), in(c2006_PcarPeve, X), ix.


% 2013.PevePvar overlaps 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_PevePvar,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PevePvar,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PevePvar,X), out(c2006_PcarPeve,X)} = 0, pw.
pie(r60, A, 1) :- ir(X, A), out(c2013_PevePvar, X), in(c2006_PcarPeve, X), ix.
c(r60, A, 1) :- vr(X, A), out(c2013_PevePvar, X), in(c2006_PcarPeve, X), ix.

pie(r60, A, 2) :- ir(X, A), in(c2013_PevePvar, X), out(c2006_PcarPeve, X), ix.
c(r60, A, 2) :- vr(X, A), in(c2013_PevePvar, X), out(c2006_PcarPeve, X), ix.

pie(r60, A, 3) :- ir(X, A), in(c2013_PevePvar, X), in(c2006_PcarPeve, X), ix.
c(r60, A, 3) :- vr(X, A), in(c2013_PevePvar, X), in(c2006_PcarPeve, X), ix.


% 2013.PbivPspi overlaps 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_PbivPspi,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PbivPspi,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PbivPspi,X), out(c2006_PcarPeve,X)} = 0, pw.
pie(r61, A, 1) :- ir(X, A), out(c2013_PbivPspi, X), in(c2006_PcarPeve, X), ix.
c(r61, A, 1) :- vr(X, A), out(c2013_PbivPspi, X), in(c2006_PcarPeve, X), ix.

pie(r61, A, 2) :- ir(X, A), in(c2013_PbivPspi, X), out(c2006_PcarPeve, X), ix.
c(r61, A, 2) :- vr(X, A), in(c2013_PbivPspi, X), out(c2006_PcarPeve, X), ix.

pie(r61, A, 3) :- ir(X, A), in(c2013_PbivPspi, X), in(c2006_PcarPeve, X), ix.
c(r61, A, 3) :- vr(X, A), in(c2013_PbivPspi, X), in(c2006_PcarPeve, X), ix.


% 2013.Pevelyn equals 2006.Pevelyn
ir(X, r62) :- out(c2013_Pevelyn,X), in(c2006_Pevelyn,X).
ir(X, r62) :- in(c2013_Pevelyn,X), out(c2006_Pevelyn,X).
ir(X, prod(r62,R)) :- out3(c2013_Pevelyn, X, R), in(c2006_Pevelyn,X), ix.
ir(X, prod(r62,R)) :- in(c2013_Pevelyn,X), out3(c2006_Pevelyn, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pevelyn,X), in(c2006_Pevelyn,X)} = 0, pw.
pie(r62, A, 1) :- ir(X, A), in(c2013_Pevelyn, X), in(c2006_Pevelyn, X), ix.
c(r62, A, 1) :- vr(X, A), in(c2013_Pevelyn, X), in(c2006_Pevelyn, X), ix.


% 2013.PevePspi overlaps 2006.PER
:- #count{X: vrs(X), in(c2013_PevePspi,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PevePspi,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PevePspi,X), out(c2006_PER,X)} = 0, pw.
pie(r63, A, 1) :- ir(X, A), out(c2013_PevePspi, X), in(c2006_PER, X), ix.
c(r63, A, 1) :- vr(X, A), out(c2013_PevePspi, X), in(c2006_PER, X), ix.

pie(r63, A, 2) :- ir(X, A), in(c2013_PevePspi, X), out(c2006_PER, X), ix.
c(r63, A, 2) :- vr(X, A), in(c2013_PevePspi, X), out(c2006_PER, X), ix.

pie(r63, A, 3) :- ir(X, A), in(c2013_PevePspi, X), in(c2006_PER, X), ix.
c(r63, A, 3) :- vr(X, A), in(c2013_PevePspi, X), in(c2006_PER, X), ix.


% 2013.PevePvar overlaps 2006.PER
:- #count{X: vrs(X), in(c2013_PevePvar,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PevePvar,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PevePvar,X), out(c2006_PER,X)} = 0, pw.
pie(r64, A, 1) :- ir(X, A), out(c2013_PevePvar, X), in(c2006_PER, X), ix.
c(r64, A, 1) :- vr(X, A), out(c2013_PevePvar, X), in(c2006_PER, X), ix.

pie(r64, A, 2) :- ir(X, A), in(c2013_PevePvar, X), out(c2006_PER, X), ix.
c(r64, A, 2) :- vr(X, A), in(c2013_PevePvar, X), out(c2006_PER, X), ix.

pie(r64, A, 3) :- ir(X, A), in(c2013_PevePvar, X), in(c2006_PER, X), ix.
c(r64, A, 3) :- vr(X, A), in(c2013_PevePvar, X), in(c2006_PER, X), ix.


% 2013.Pvariab disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Pvariab,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pvariab,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r65, A, 1) :- ir(X, A), out(c2013_Pvariab, X), in(c2006_PcarPeve, X), ix.
c(r65, A, 1) :- vr(X, A), out(c2013_Pvariab, X), in(c2006_PcarPeve, X), ix.

pie(r65, A, 2) :- ir(X, A), in(c2013_Pvariab, X), out(c2006_PcarPeve, X), ix.
c(r65, A, 2) :- vr(X, A), in(c2013_Pvariab, X), out(c2006_PcarPeve, X), ix.

ir(X, r65) :- in(c2013_Pvariab,X), in(c2006_PcarPeve,X).

% 2013.PbivPspi overlaps 2006.PER
:- #count{X: vrs(X), in(c2013_PbivPspi,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PbivPspi,X), in(c2006_PER,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PbivPspi,X), out(c2006_PER,X)} = 0, pw.
pie(r66, A, 1) :- ir(X, A), out(c2013_PbivPspi, X), in(c2006_PER, X), ix.
c(r66, A, 1) :- vr(X, A), out(c2013_PbivPspi, X), in(c2006_PER, X), ix.

pie(r66, A, 2) :- ir(X, A), in(c2013_PbivPspi, X), out(c2006_PER, X), ix.
c(r66, A, 2) :- vr(X, A), in(c2013_PbivPspi, X), out(c2006_PER, X), ix.

pie(r66, A, 3) :- ir(X, A), in(c2013_PbivPspi, X), in(c2006_PER, X), ix.
c(r66, A, 3) :- vr(X, A), in(c2013_PbivPspi, X), in(c2006_PER, X), ix.


% 2013.Pbivent disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Pbivent,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pbivent,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r67, A, 1) :- ir(X, A), out(c2013_Pbivent, X), in(c2006_PcarPeve, X), ix.
c(r67, A, 1) :- vr(X, A), out(c2013_Pbivent, X), in(c2006_PcarPeve, X), ix.

pie(r67, A, 2) :- ir(X, A), in(c2013_Pbivent, X), out(c2006_PcarPeve, X), ix.
c(r67, A, 2) :- vr(X, A), in(c2013_Pbivent, X), out(c2006_PcarPeve, X), ix.

ir(X, r67) :- in(c2013_Pbivent,X), in(c2006_PcarPeve,X).

% 2013.Psplend disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Psplend,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Psplend,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r68, A, 1) :- ir(X, A), out(c2013_Psplend, X), in(c2006_PcarPeve, X), ix.
c(r68, A, 1) :- vr(X, A), out(c2013_Psplend, X), in(c2006_PcarPeve, X), ix.

pie(r68, A, 2) :- ir(X, A), in(c2013_Psplend, X), out(c2006_PcarPeve, X), ix.
c(r68, A, 2) :- vr(X, A), in(c2013_Psplend, X), out(c2006_PcarPeve, X), ix.

ir(X, r68) :- in(c2013_Psplend,X), in(c2006_PcarPeve,X).

% 2013.PcarPspi overlaps 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_PcarPspi,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PcarPspi,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PcarPspi,X), out(c2006_PcarPeve,X)} = 0, pw.
pie(r69, A, 1) :- ir(X, A), out(c2013_PcarPspi, X), in(c2006_PcarPeve, X), ix.
c(r69, A, 1) :- vr(X, A), out(c2013_PcarPspi, X), in(c2006_PcarPeve, X), ix.

pie(r69, A, 2) :- ir(X, A), in(c2013_PcarPspi, X), out(c2006_PcarPeve, X), ix.
c(r69, A, 2) :- vr(X, A), in(c2013_PcarPspi, X), out(c2006_PcarPeve, X), ix.

pie(r69, A, 3) :- ir(X, A), in(c2013_PcarPspi, X), in(c2006_PcarPeve, X), ix.
c(r69, A, 3) :- vr(X, A), in(c2013_PcarPspi, X), in(c2006_PcarPeve, X), ix.


% 2013.PcarPsul overlaps 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_PcarPsul,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PcarPsul,X), in(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), in(c2013_PcarPsul,X), out(c2006_PcarPeve,X)} = 0, pw.
pie(r70, A, 1) :- ir(X, A), out(c2013_PcarPsul, X), in(c2006_PcarPeve, X), ix.
c(r70, A, 1) :- vr(X, A), out(c2013_PcarPsul, X), in(c2006_PcarPeve, X), ix.

pie(r70, A, 2) :- ir(X, A), in(c2013_PcarPsul, X), out(c2006_PcarPeve, X), ix.
c(r70, A, 2) :- vr(X, A), in(c2013_PcarPsul, X), out(c2006_PcarPeve, X), ix.

pie(r70, A, 3) :- ir(X, A), in(c2013_PcarPsul, X), in(c2006_PcarPeve, X), ix.
c(r70, A, 3) :- vr(X, A), in(c2013_PcarPsul, X), in(c2006_PcarPeve, X), ix.


% 2013.Pcarlud equals 2006.Pcarlud
ir(X, r71) :- out(c2013_Pcarlud,X), in(c2006_Pcarlud,X).
ir(X, r71) :- in(c2013_Pcarlud,X), out(c2006_Pcarlud,X).
ir(X, prod(r71,R)) :- out3(c2013_Pcarlud, X, R), in(c2006_Pcarlud,X), ix.
ir(X, prod(r71,R)) :- in(c2013_Pcarlud,X), out3(c2006_Pcarlud, X, R), ix.
:- #count{X: vrs(X), in(c2013_Pcarlud,X), in(c2006_Pcarlud,X)} = 0, pw.
pie(r71, A, 1) :- ir(X, A), in(c2013_Pcarlud, X), in(c2006_Pcarlud, X), ix.
c(r71, A, 1) :- vr(X, A), in(c2013_Pcarlud, X), in(c2006_Pcarlud, X), ix.


% 2013.Psulcat disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Psulcat,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Psulcat,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r72, A, 1) :- ir(X, A), out(c2013_Psulcat, X), in(c2006_PcarPeve, X), ix.
c(r72, A, 1) :- vr(X, A), out(c2013_Psulcat, X), in(c2006_PcarPeve, X), ix.

pie(r72, A, 2) :- ir(X, A), in(c2013_Psulcat, X), out(c2006_PcarPeve, X), ix.
c(r72, A, 2) :- vr(X, A), in(c2013_Psulcat, X), out(c2006_PcarPeve, X), ix.

ir(X, r72) :- in(c2013_Psulcat,X), in(c2006_PcarPeve,X).

% 2013.Ppubico disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Ppubico,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Ppubico,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r73, A, 1) :- ir(X, A), out(c2013_Ppubico, X), in(c2006_PcarPeve, X), ix.
c(r73, A, 1) :- vr(X, A), out(c2013_Ppubico, X), in(c2006_PcarPeve, X), ix.

pie(r73, A, 2) :- ir(X, A), in(c2013_Ppubico, X), out(c2006_PcarPeve, X), ix.
c(r73, A, 2) :- vr(X, A), in(c2013_Ppubico, X), out(c2006_PcarPeve, X), ix.

ir(X, r73) :- in(c2013_Ppubico,X), in(c2006_PcarPeve,X).

% 2013.PsalPspi disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_PsalPspi,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_PsalPspi,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r74, A, 1) :- ir(X, A), out(c2013_PsalPspi, X), in(c2006_PcarPeve, X), ix.
c(r74, A, 1) :- vr(X, A), out(c2013_PsalPspi, X), in(c2006_PcarPeve, X), ix.

pie(r74, A, 2) :- ir(X, A), in(c2013_PsalPspi, X), out(c2006_PcarPeve, X), ix.
c(r74, A, 2) :- vr(X, A), in(c2013_PsalPspi, X), out(c2006_PcarPeve, X), ix.

ir(X, r74) :- in(c2013_PsalPspi,X), in(c2006_PcarPeve,X).

% 2013.Psalpin disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Psalpin,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Psalpin,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r75, A, 1) :- ir(X, A), out(c2013_Psalpin, X), in(c2006_PcarPeve, X), ix.
c(r75, A, 1) :- vr(X, A), out(c2013_Psalpin, X), in(c2006_PcarPeve, X), ix.

pie(r75, A, 2) :- ir(X, A), in(c2013_Psalpin, X), out(c2006_PcarPeve, X), ix.
c(r75, A, 2) :- vr(X, A), in(c2013_Psalpin, X), out(c2006_PcarPeve, X), ix.

ir(X, r75) :- in(c2013_Psalpin,X), in(c2006_PcarPeve,X).

% 2013.Pspinot disjoint 2006.PcarPeve
:- #count{X: vrs(X), in(c2013_Pspinot,X), out(c2006_PcarPeve,X)} = 0, pw.
:- #count{X: vrs(X), out(c2013_Pspinot,X), in(c2006_PcarPeve,X)} = 0, pw.
pie(r76, A, 1) :- ir(X, A), out(c2013_Pspinot, X), in(c2006_PcarPeve, X), ix.
c(r76, A, 1) :- vr(X, A), out(c2013_Pspinot, X), in(c2006_PcarPeve, X), ix.

pie(r76, A, 2) :- ir(X, A), in(c2013_Pspinot, X), out(c2006_PcarPeve, X), ix.
c(r76, A, 2) :- vr(X, A), in(c2013_Pspinot, X), out(c2006_PcarPeve, X), ix.

ir(X, r76) :- in(c2013_Pspinot,X), in(c2006_PcarPeve,X).

%%% Decoding now
:- rel(X, Y, "="), rel(X, Y, "<"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "="), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, ">"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "<"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "><"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, ">"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- rel(X, Y, "><"), rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), pw.
:- not rel(X, Y, "="), not rel(X, Y, "<"), not rel(X, Y, ">"), not rel(X, Y, "><"), not rel(X, Y, "!"), concept2(X, N1), concept2(Y, N2), N1 < N2, not ncf(X), not ncf(Y), pw.

rel(X, Y, "=") :- not hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "<") :- not hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, ">") :- hint(X, Y, 0), hint(X, Y, 1), not hint(X, Y, 2), pw.
rel(X, Y, "><") :- hint(X, Y, 0), hint(X, Y, 1), hint(X, Y, 2), pw.
rel(X, Y, "!") :- hint(X, Y, 0), not hint(X, Y, 1), hint(X, Y, 2), pw.


hint(X, Y, 0) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), out(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 1) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), in(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.
hint(X, Y, 2) :- concept2(X, N1), concept2(Y, N2), N1 < N2, vrs(R), out(X, R), in(Y, R), not ncf(X), not ncf(Y), pw.

