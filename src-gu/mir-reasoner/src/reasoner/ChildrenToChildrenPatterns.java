package reasoner;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

import common_classes.Articulations;

public class ChildrenToChildrenPatterns {
	// a map which, when given the relations a1_to_b1, a1_to_b2, a2_to_b1, and a2_to_b2, yields the relation for A_to_B
	private static final Map<String, String> FROM_RELATIONS_TO_R = build_ToR();
	// a map which, when given the relation A_to_B, yields the relations for a1_to_b1, a1_to_b2, a2_to_b1, and a2_to_b2
	private static final Map<String, Set<String>> FROM_R_TO_RELATIONS = build_FromR();

	// yields R from the children-to-children relations
	public static String getRFromRelations(String a1_to_b1, String a1_to_b2, String a2_to_b1, String a2_to_b2){
		String R = "";
		for ( char r1 : a1_to_b1.toCharArray() )
			for ( char r2 : a1_to_b2.toCharArray() )
				for ( char r3 : a2_to_b1.toCharArray() )
					for ( char r4 : a2_to_b2.toCharArray() )
						R = Articulations.union(R, FROM_RELATIONS_TO_R.get(""+r1+r2+r3+r4));
		return R;
	}

	// yields the children-to-children relations from R
	public static String[] getRelationsFromR(String R, String a1_to_b1, String a1_to_b2, String a2_to_b1, String a2_to_b2){
		Set<String> possiblePatterns = new HashSet<String>(82, 1.0f);
		Set<String> consistentPatterns = new HashSet<String>(82, 1.0f);
		String[] newRelations = new String[4];

		for (char relation : R.toCharArray())
			possiblePatterns.addAll(FROM_R_TO_RELATIONS.get(""+relation));

		boolean matchesPattern;
		for (String pattern : possiblePatterns){
			matchesPattern =
					a1_to_b1.contains(""+pattern.charAt(0)) &&
					a1_to_b2.contains(""+pattern.charAt(1)) &&
					a2_to_b1.contains(""+pattern.charAt(2)) &&
					a2_to_b2.contains(""+pattern.charAt(3));
			if (matchesPattern)
				consistentPatterns.add(pattern);			
		}

		String new_a1_to_b1 = "";
		String new_a1_to_b2 = "";
		String new_a2_to_b1 = "";
		String new_a2_to_b2 = "";
		for (String pattern : consistentPatterns){
			new_a1_to_b1 += Articulations.union(new_a1_to_b1, ""+pattern.charAt(0));
			new_a1_to_b2 += Articulations.union(new_a1_to_b2, ""+pattern.charAt(1));
			new_a2_to_b1 += Articulations.union(new_a2_to_b1, ""+pattern.charAt(2));
			new_a2_to_b2 += Articulations.union(new_a2_to_b2, ""+pattern.charAt(3));
		}

		newRelations[0] = new_a1_to_b1;
		newRelations[1] = new_a1_to_b2;
		newRelations[2] = new_a2_to_b1;
		newRelations[3] = new_a2_to_b2;

		return newRelations;
	}

	// builds the map FROM_RELATIONS_TO_R
	private static Map<String, String> build_ToR(){
		Map<String, String> to_R = new HashMap<String, String>(625, 1.0f);
		to_R.put("<<<<", "");
		to_R.put("<<<>", "");
		to_R.put("<<<=", "");
		to_R.put("<<<!", "");
		to_R.put("<<<o", "");
		to_R.put("<<><", "");
		to_R.put("<<>>", "");
		to_R.put("<<>=", "");
		to_R.put("<<>!", "");
		to_R.put("<<>o", "");
		to_R.put("<<=<", "");
		to_R.put("<<=>", "");
		to_R.put("<<==", "");
		to_R.put("<<=!", "");
		to_R.put("<<=o", "");
		to_R.put("<<!<", "");
		to_R.put("<<!>", "");
		to_R.put("<<!=", "");
		to_R.put("<<!!", "");
		to_R.put("<<!o", "");
		to_R.put("<<o<", "");
		to_R.put("<<o>", "");
		to_R.put("<<o=", "");
		to_R.put("<<o!", "");
		to_R.put("<<oo", "");
		to_R.put("<><<", "");
		to_R.put("<><>", "");
		to_R.put("<><=", "");
		to_R.put("<><!", "");
		to_R.put("<><o", "");
		to_R.put("<>><", "");
		to_R.put("<>>>", "");
		to_R.put("<>>=", "");
		to_R.put("<>>!", "");
		to_R.put("<>>o", "");
		to_R.put("<>=<", "");
		to_R.put("<>=>", "");
		to_R.put("<>==", "");
		to_R.put("<>=!", "");
		to_R.put("<>=o", "");
		to_R.put("<>!<", "");
		to_R.put("<>!>", "");
		to_R.put("<>!=", "");
		to_R.put("<>!!", "");
		to_R.put("<>!o", "");
		to_R.put("<>o<", "");
		to_R.put("<>o>", "");
		to_R.put("<>o=", "");
		to_R.put("<>o!", "");
		to_R.put("<>oo", "");
		to_R.put("<=<<", "");
		to_R.put("<=<>", "");
		to_R.put("<=<=", "");
		to_R.put("<=<!", "");
		to_R.put("<=<o", "");
		to_R.put("<=><", "");
		to_R.put("<=>>", "");
		to_R.put("<=>=", "");
		to_R.put("<=>!", "");
		to_R.put("<=>o", "");
		to_R.put("<==<", "");
		to_R.put("<==>", "");
		to_R.put("<===", "");
		to_R.put("<==!", "");
		to_R.put("<==o", "");
		to_R.put("<=!<", "");
		to_R.put("<=!>", "");
		to_R.put("<=!=", "");
		to_R.put("<=!!", "");
		to_R.put("<=!o", "");
		to_R.put("<=o<", "");
		to_R.put("<=o>", "");
		to_R.put("<=o=", "");
		to_R.put("<=o!", "");
		to_R.put("<=oo", "");
		to_R.put("<!<<", "");
		to_R.put("<!<>", "");
		to_R.put("<!<=", "");
		to_R.put("<!<!", "<");
		to_R.put("<!<o", "");
		to_R.put("<!><", "");
		to_R.put("<!>>", "");
		to_R.put("<!>=", "");
		to_R.put("<!>!", "");
		to_R.put("<!>o", "");
		to_R.put("<!=<", "");
		to_R.put("<!=>", "");
		to_R.put("<!==", "");
		to_R.put("<!=!", "");
		to_R.put("<!=o", "");
		to_R.put("<!!<", "<");
		to_R.put("<!!>", "o");
		to_R.put("<!!=", "<");
		to_R.put("<!!!", "o");
		to_R.put("<!!o", "o");
		to_R.put("<!o<", "");
		to_R.put("<!o>", "<>=o");
		to_R.put("<!o=", "");
		to_R.put("<!o!", "o");
		to_R.put("<!oo", "<o");
		to_R.put("<o<<", "");
		to_R.put("<o<>", "");
		to_R.put("<o<=", "");
		to_R.put("<o<!", "");
		to_R.put("<o<o", "");
		to_R.put("<o><", "");
		to_R.put("<o>>", "");
		to_R.put("<o>=", "");
		to_R.put("<o>!", "");
		to_R.put("<o>o", "");
		to_R.put("<o=<", "");
		to_R.put("<o=>", "");
		to_R.put("<o==", "");
		to_R.put("<o=!", "");
		to_R.put("<o=o", "");
		to_R.put("<o!<", "");
		to_R.put("<o!>", "");
		to_R.put("<o!=", "");
		to_R.put("<o!!", "");
		to_R.put("<o!o", "");
		to_R.put("<oo<", "");
		to_R.put("<oo>", "");
		to_R.put("<oo=", "");
		to_R.put("<oo!", "");
		to_R.put("<ooo", "");
		to_R.put("><<<", "");
		to_R.put("><<>", "");
		to_R.put("><<=", "");
		to_R.put("><<!", "");
		to_R.put("><<o", "");
		to_R.put("><><", "");
		to_R.put("><>>", "");
		to_R.put("><>=", "");
		to_R.put("><>!", "");
		to_R.put("><>o", "");
		to_R.put("><=<", "");
		to_R.put("><=>", "");
		to_R.put("><==", "");
		to_R.put("><=!", "");
		to_R.put("><=o", "");
		to_R.put("><!<", "");
		to_R.put("><!>", "");
		to_R.put("><!=", "");
		to_R.put("><!!", "");
		to_R.put("><!o", "");
		to_R.put("><o<", "");
		to_R.put("><o>", "");
		to_R.put("><o=", "");
		to_R.put("><o!", "");
		to_R.put("><oo", "");
		to_R.put(">><<", "");
		to_R.put(">><>", "");
		to_R.put(">><=", "");
		to_R.put(">><!", "");
		to_R.put(">><o", "");
		to_R.put(">>><", "");
		to_R.put(">>>>", "");
		to_R.put(">>>=", "");
		to_R.put(">>>!", "");
		to_R.put(">>>o", "");
		to_R.put(">>=<", "");
		to_R.put(">>=>", "");
		to_R.put(">>==", "");
		to_R.put(">>=!", "");
		to_R.put(">>=o", "");
		to_R.put(">>!<", "");
		to_R.put(">>!>", "");
		to_R.put(">>!=", "");
		to_R.put(">>!!", ">");
		to_R.put(">>!o", "");
		to_R.put(">>o<", "");
		to_R.put(">>o>", "");
		to_R.put(">>o=", "");
		to_R.put(">>o!", "");
		to_R.put(">>oo", "");
		to_R.put(">=<<", "");
		to_R.put(">=<>", "");
		to_R.put(">=<=", "");
		to_R.put(">=<!", "");
		to_R.put(">=<o", "");
		to_R.put(">=><", "");
		to_R.put(">=>>", "");
		to_R.put(">=>=", "");
		to_R.put(">=>!", "");
		to_R.put(">=>o", "");
		to_R.put(">==<", "");
		to_R.put(">==>", "");
		to_R.put(">===", "");
		to_R.put(">==!", "");
		to_R.put(">==o", "");
		to_R.put(">=!<", "");
		to_R.put(">=!>", "");
		to_R.put(">=!=", "");
		to_R.put(">=!!", "");
		to_R.put(">=!o", "");
		to_R.put(">=o<", "");
		to_R.put(">=o>", "");
		to_R.put(">=o=", "");
		to_R.put(">=o!", "");
		to_R.put(">=oo", "");
		to_R.put(">!<<", "");
		to_R.put(">!<>", "");
		to_R.put(">!<=", "");
		to_R.put(">!<!", "");
		to_R.put(">!<o", "");
		to_R.put(">!><", "");
		to_R.put(">!>>", "");
		to_R.put(">!>=", "");
		to_R.put(">!>!", "");
		to_R.put(">!>o", "");
		to_R.put(">!=<", "");
		to_R.put(">!=>", "");
		to_R.put(">!==", "");
		to_R.put(">!=!", "");
		to_R.put(">!=o", "");
		to_R.put(">!!<", "o");
		to_R.put(">!!>", ">");
		to_R.put(">!!=", ">");
		to_R.put(">!!!", "o");
		to_R.put(">!!o", "o");
		to_R.put(">!o<", "");
		to_R.put(">!o>", "");
		to_R.put(">!o=", "");
		to_R.put(">!o!", "");
		to_R.put(">!oo", "");
		to_R.put(">o<<", "");
		to_R.put(">o<>", "");
		to_R.put(">o<=", "");
		to_R.put(">o<!", "");
		to_R.put(">o<o", "");
		to_R.put(">o><", "");
		to_R.put(">o>>", "");
		to_R.put(">o>=", "");
		to_R.put(">o>!", "");
		to_R.put(">o>o", "");
		to_R.put(">o=<", "");
		to_R.put(">o=>", "");
		to_R.put(">o==", "");
		to_R.put(">o=!", "");
		to_R.put(">o=o", "");
		to_R.put(">o!<", "<>=o");
		to_R.put(">o!>", "");
		to_R.put(">o!=", "");
		to_R.put(">o!!", "o");
		to_R.put(">o!o", ">o");
		to_R.put(">oo<", "");
		to_R.put(">oo>", "");
		to_R.put(">oo=", "");
		to_R.put(">oo!", "");
		to_R.put(">ooo", "");
		to_R.put("=<<<", "");
		to_R.put("=<<>", "");
		to_R.put("=<<=", "");
		to_R.put("=<<!", "");
		to_R.put("=<<o", "");
		to_R.put("=<><", "");
		to_R.put("=<>>", "");
		to_R.put("=<>=", "");
		to_R.put("=<>!", "");
		to_R.put("=<>o", "");
		to_R.put("=<=<", "");
		to_R.put("=<=>", "");
		to_R.put("=<==", "");
		to_R.put("=<=!", "");
		to_R.put("=<=o", "");
		to_R.put("=<!<", "");
		to_R.put("=<!>", "");
		to_R.put("=<!=", "");
		to_R.put("=<!!", "");
		to_R.put("=<!o", "");
		to_R.put("=<o<", "");
		to_R.put("=<o>", "");
		to_R.put("=<o=", "");
		to_R.put("=<o!", "");
		to_R.put("=<oo", "");
		to_R.put("=><<", "");
		to_R.put("=><>", "");
		to_R.put("=><=", "");
		to_R.put("=><!", "");
		to_R.put("=><o", "");
		to_R.put("=>><", "");
		to_R.put("=>>>", "");
		to_R.put("=>>=", "");
		to_R.put("=>>!", "");
		to_R.put("=>>o", "");
		to_R.put("=>=<", "");
		to_R.put("=>=>", "");
		to_R.put("=>==", "");
		to_R.put("=>=!", "");
		to_R.put("=>=o", "");
		to_R.put("=>!<", "");
		to_R.put("=>!>", "");
		to_R.put("=>!=", "");
		to_R.put("=>!!", "");
		to_R.put("=>!o", "");
		to_R.put("=>o<", "");
		to_R.put("=>o>", "");
		to_R.put("=>o=", "");
		to_R.put("=>o!", "");
		to_R.put("=>oo", "");
		to_R.put("==<<", "");
		to_R.put("==<>", "");
		to_R.put("==<=", "");
		to_R.put("==<!", "");
		to_R.put("==<o", "");
		to_R.put("==><", "");
		to_R.put("==>>", "");
		to_R.put("==>=", "");
		to_R.put("==>!", "");
		to_R.put("==>o", "");
		to_R.put("===<", "");
		to_R.put("===>", "");
		to_R.put("====", "");
		to_R.put("===!", "");
		to_R.put("===o", "");
		to_R.put("==!<", "");
		to_R.put("==!>", "");
		to_R.put("==!=", "");
		to_R.put("==!!", "");
		to_R.put("==!o", "");
		to_R.put("==o<", "");
		to_R.put("==o>", "");
		to_R.put("==o=", "");
		to_R.put("==o!", "");
		to_R.put("==oo", "");
		to_R.put("=!<<", "");
		to_R.put("=!<>", "");
		to_R.put("=!<=", "");
		to_R.put("=!<!", "");
		to_R.put("=!<o", "");
		to_R.put("=!><", "");
		to_R.put("=!>>", "");
		to_R.put("=!>=", "");
		to_R.put("=!>!", "");
		to_R.put("=!>o", "");
		to_R.put("=!=<", "");
		to_R.put("=!=>", "");
		to_R.put("=!==", "");
		to_R.put("=!=!", "");
		to_R.put("=!=o", "");
		to_R.put("=!!<", "<");
		to_R.put("=!!>", ">");
		to_R.put("=!!=", "=");
		to_R.put("=!!!", "o");
		to_R.put("=!!o", "o");
		to_R.put("=!o<", "");
		to_R.put("=!o>", "");
		to_R.put("=!o=", "");
		to_R.put("=!o!", "");
		to_R.put("=!oo", "");
		to_R.put("=o<<", "");
		to_R.put("=o<>", "");
		to_R.put("=o<=", "");
		to_R.put("=o<!", "");
		to_R.put("=o<o", "");
		to_R.put("=o><", "");
		to_R.put("=o>>", "");
		to_R.put("=o>=", "");
		to_R.put("=o>!", "");
		to_R.put("=o>o", "");
		to_R.put("=o=<", "");
		to_R.put("=o=>", "");
		to_R.put("=o==", "");
		to_R.put("=o=!", "");
		to_R.put("=o=o", "");
		to_R.put("=o!<", "");
		to_R.put("=o!>", "");
		to_R.put("=o!=", "");
		to_R.put("=o!!", "");
		to_R.put("=o!o", "");
		to_R.put("=oo<", "");
		to_R.put("=oo>", "");
		to_R.put("=oo=", "");
		to_R.put("=oo!", "");
		to_R.put("=ooo", "");
		to_R.put("!<<<", "");
		to_R.put("!<<>", "");
		to_R.put("!<<=", "");
		to_R.put("!<<!", "<");
		to_R.put("!<<o", "");
		to_R.put("!<><", "");
		to_R.put("!<>>", "");
		to_R.put("!<>=", "");
		to_R.put("!<>!", "o");
		to_R.put("!<>o", "<>=o");
		to_R.put("!<=<", "");
		to_R.put("!<=>", "");
		to_R.put("!<==", "");
		to_R.put("!<=!", "<");
		to_R.put("!<=o", "");
		to_R.put("!<!<", "<");
		to_R.put("!<!>", "");
		to_R.put("!<!=", "");
		to_R.put("!<!!", "o");
		to_R.put("!<!o", "o");
		to_R.put("!<o<", "");
		to_R.put("!<o>", "");
		to_R.put("!<o=", "");
		to_R.put("!<o!", "o");
		to_R.put("!<oo", "<o");
		to_R.put("!><<", "");
		to_R.put("!><>", "");
		to_R.put("!><=", "");
		to_R.put("!><!", "o");
		to_R.put("!><o", "");
		to_R.put("!>><", "");
		to_R.put("!>>>", "");
		to_R.put("!>>=", "");
		to_R.put("!>>!", ">");
		to_R.put("!>>o", "");
		to_R.put("!>=<", "");
		to_R.put("!>=>", "");
		to_R.put("!>==", "");
		to_R.put("!>=!", ">");
		to_R.put("!>=o", "");
		to_R.put("!>!<", "");
		to_R.put("!>!>", "");
		to_R.put("!>!=", "");
		to_R.put("!>!!", "o");
		to_R.put("!>!o", "");
		to_R.put("!>o<", "");
		to_R.put("!>o>", "");
		to_R.put("!>o=", "");
		to_R.put("!>o!", "o");
		to_R.put("!>oo", "");
		to_R.put("!=<<", "");
		to_R.put("!=<>", "");
		to_R.put("!=<=", "");
		to_R.put("!=<!", "<");
		to_R.put("!=<o", "");
		to_R.put("!=><", "");
		to_R.put("!=>>", "");
		to_R.put("!=>=", "");
		to_R.put("!=>!", ">");
		to_R.put("!=>o", "");
		to_R.put("!==<", "");
		to_R.put("!==>", "");
		to_R.put("!===", "");
		to_R.put("!==!", "=");
		to_R.put("!==o", "");
		to_R.put("!=!<", "");
		to_R.put("!=!>", "");
		to_R.put("!=!=", "");
		to_R.put("!=!!", "o");
		to_R.put("!=!o", "");
		to_R.put("!=o<", "");
		to_R.put("!=o>", "");
		to_R.put("!=o=", "");
		to_R.put("!=o!", "o");
		to_R.put("!=oo", "");
		to_R.put("!!<<", "");
		to_R.put("!!<>", "");
		to_R.put("!!<=", "");
		to_R.put("!!<!", "o");
		to_R.put("!!<o", "");
		to_R.put("!!><", "");
		to_R.put("!!>>", ">");
		to_R.put("!!>=", "");
		to_R.put("!!>!", "o");
		to_R.put("!!>o", "o");
		to_R.put("!!=<", "");
		to_R.put("!!=>", "");
		to_R.put("!!==", "");
		to_R.put("!!=!", "o");
		to_R.put("!!=o", "");
		to_R.put("!!!<", "o");
		to_R.put("!!!>", "o");
		to_R.put("!!!=", "o");
		to_R.put("!!!!", "!");
		to_R.put("!!!o", "o");
		to_R.put("!!o<", "");
		to_R.put("!!o>", "o");
		to_R.put("!!o=", "");
		to_R.put("!!o!", "o");
		to_R.put("!!oo", "o");
		to_R.put("!o<<", "");
		to_R.put("!o<>", "");
		to_R.put("!o<=", "");
		to_R.put("!o<!", "o");
		to_R.put("!o<o", "");
		to_R.put("!o><", "");
		to_R.put("!o>>", "");
		to_R.put("!o>=", "");
		to_R.put("!o>!", "o");
		to_R.put("!o>o", ">o");
		to_R.put("!o=<", "");
		to_R.put("!o=>", "");
		to_R.put("!o==", "");
		to_R.put("!o=!", "o");
		to_R.put("!o=o", "");
		to_R.put("!o!<", "o");
		to_R.put("!o!>", "");
		to_R.put("!o!=", "");
		to_R.put("!o!!", "o");
		to_R.put("!o!o", "o");
		to_R.put("!oo<", "");
		to_R.put("!oo>", "");
		to_R.put("!oo=", "");
		to_R.put("!oo!", "o");
		to_R.put("!ooo", "o");
		to_R.put("o<<<", "");
		to_R.put("o<<>", "");
		to_R.put("o<<=", "");
		to_R.put("o<<!", "");
		to_R.put("o<<o", "");
		to_R.put("o<><", "");
		to_R.put("o<>>", "");
		to_R.put("o<>=", "");
		to_R.put("o<>!", "");
		to_R.put("o<>o", "");
		to_R.put("o<=<", "");
		to_R.put("o<=>", "");
		to_R.put("o<==", "");
		to_R.put("o<=!", "");
		to_R.put("o<=o", "");
		to_R.put("o<!<", "");
		to_R.put("o<!>", "");
		to_R.put("o<!=", "");
		to_R.put("o<!!", "");
		to_R.put("o<!o", "");
		to_R.put("o<o<", "");
		to_R.put("o<o>", "");
		to_R.put("o<o=", "");
		to_R.put("o<o!", "");
		to_R.put("o<oo", "");
		to_R.put("o><<", "");
		to_R.put("o><>", "");
		to_R.put("o><=", "");
		to_R.put("o><!", "<>=o");
		to_R.put("o><o", "");
		to_R.put("o>><", "");
		to_R.put("o>>>", "");
		to_R.put("o>>=", "");
		to_R.put("o>>!", "");
		to_R.put("o>>o", "");
		to_R.put("o>=<", "");
		to_R.put("o>=>", "");
		to_R.put("o>==", "");
		to_R.put("o>=!", "");
		to_R.put("o>=o", "");
		to_R.put("o>!<", "");
		to_R.put("o>!>", "");
		to_R.put("o>!=", "");
		to_R.put("o>!!", "o");
		to_R.put("o>!o", "");
		to_R.put("o>o<", "");
		to_R.put("o>o>", "");
		to_R.put("o>o=", "");
		to_R.put("o>o!", ">o");
		to_R.put("o>oo", "");
		to_R.put("o=<<", "");
		to_R.put("o=<>", "");
		to_R.put("o=<=", "");
		to_R.put("o=<!", "");
		to_R.put("o=<o", "");
		to_R.put("o=><", "");
		to_R.put("o=>>", "");
		to_R.put("o=>=", "");
		to_R.put("o=>!", "");
		to_R.put("o=>o", "");
		to_R.put("o==<", "");
		to_R.put("o==>", "");
		to_R.put("o===", "");
		to_R.put("o==!", "");
		to_R.put("o==o", "");
		to_R.put("o=!<", "");
		to_R.put("o=!>", "");
		to_R.put("o=!=", "");
		to_R.put("o=!!", "");
		to_R.put("o=!o", "");
		to_R.put("o=o<", "");
		to_R.put("o=o>", "");
		to_R.put("o=o=", "");
		to_R.put("o=o!", "");
		to_R.put("o=oo", "");
		to_R.put("o!<<", "");
		to_R.put("o!<>", "");
		to_R.put("o!<=", "");
		to_R.put("o!<!", "o");
		to_R.put("o!<o", "");
		to_R.put("o!><", "");
		to_R.put("o!>>", "");
		to_R.put("o!>=", "");
		to_R.put("o!>!", "");
		to_R.put("o!>o", "");
		to_R.put("o!=<", "");
		to_R.put("o!=>", "");
		to_R.put("o!==", "");
		to_R.put("o!=!", "");
		to_R.put("o!=o", "");
		to_R.put("o!!<", "o");
		to_R.put("o!!>", "o");
		to_R.put("o!!=", "o");
		to_R.put("o!!!", "o");
		to_R.put("o!!o", "o");
		to_R.put("o!o<", "");
		to_R.put("o!o>", ">o");
		to_R.put("o!o=", "");
		to_R.put("o!o!", "o");
		to_R.put("o!oo", "o");
		to_R.put("oo<<", "");
		to_R.put("oo<>", "");
		to_R.put("oo<=", "");
		to_R.put("oo<!", "<o");
		to_R.put("oo<o", "");
		to_R.put("oo><", "");
		to_R.put("oo>>", "");
		to_R.put("oo>=", "");
		to_R.put("oo>!", "");
		to_R.put("oo>o", "");
		to_R.put("oo=<", "");
		to_R.put("oo=>", "");
		to_R.put("oo==", "");
		to_R.put("oo=!", "");
		to_R.put("oo=o", "");
		to_R.put("oo!<", "<o");
		to_R.put("oo!>", "");
		to_R.put("oo!=", "");
		to_R.put("oo!!", "o");
		to_R.put("oo!o", "o");
		to_R.put("ooo<", "");
		to_R.put("ooo>", "");
		to_R.put("ooo=", "");
		to_R.put("ooo!", "o");
		to_R.put("oooo", "<>=o");
		return to_R;
	}

	// builds the map FROM_R_TO_RELATIONS
	private static Map<String, Set<String>> build_FromR(){
		Map<String, Set<String>> fromR = new HashMap<String, Set<String>>(5, 1.0f);
		fromR.put("<", getProperPartPatterns());
		fromR.put(">", getInverseProperPartPatterns());
		fromR.put("=", getEqualsPatterns());
		fromR.put("!", getDisjointPatterns());
		fromR.put("o", getOverlapsPatterns());
		
/*		Set<String> acc_set = new HashSet<String>(); // TODO retrieves the set of all consistent child patterns (there are 82)
		acc_set.addAll(getProperPartPatterns());
		System.out.println("NUMBER O' PATTERNS: " + acc_set.size());
		acc_set.addAll(getInverseProperPartPatterns());
		System.out.println("NUMBER O' PATTERNS: " + acc_set.size());
		acc_set.addAll(getEqualsPatterns());
		System.out.println("NUMBER O' PATTERNS: " + acc_set.size());
		acc_set.addAll(getDisjointPatterns());
		System.out.println("NUMBER O' PATTERNS: " + acc_set.size());
		acc_set.addAll(getOverlapsPatterns());
		System.out.println("NUMBER O' PATTERNS: " + acc_set.size());	*/
		
		return fromR;
	}

	private static Set<String> getProperPartPatterns(){
		Set<String> properPartPatterns = new HashSet<String>(17, 1.0f);
		properPartPatterns.add("<!<!");
		properPartPatterns.add("<!!<");
		properPartPatterns.add("<!!=");
		properPartPatterns.add("<!o>");
		properPartPatterns.add("<!oo");
		properPartPatterns.add(">o!<");
		properPartPatterns.add("=!!<");
		properPartPatterns.add("!<<!");
		properPartPatterns.add("!<>o");
		properPartPatterns.add("!<=!");
		properPartPatterns.add("!<!<");
		properPartPatterns.add("!<oo");
		properPartPatterns.add("!=<!");
		properPartPatterns.add("o><!");
		properPartPatterns.add("oo<!");
		properPartPatterns.add("oo!<");
		properPartPatterns.add("oooo");
		return properPartPatterns;
	}

	private static Set<String> getInverseProperPartPatterns(){
		Set<String> inverseProperPartPatterns = new HashSet<String>(17, 1.0f);
		inverseProperPartPatterns.add("<!o>");
		inverseProperPartPatterns.add(">>!!");
		inverseProperPartPatterns.add(">!!>");
		inverseProperPartPatterns.add(">!!=");
		inverseProperPartPatterns.add(">o!<");
		inverseProperPartPatterns.add(">o!o");
		inverseProperPartPatterns.add("=!!>");
		inverseProperPartPatterns.add("!<>o");
		inverseProperPartPatterns.add("!>>!");
		inverseProperPartPatterns.add("!>=!");
		inverseProperPartPatterns.add("!=>!");
		inverseProperPartPatterns.add("!!>>");
		inverseProperPartPatterns.add("!o>o");
		inverseProperPartPatterns.add("o><!");
		inverseProperPartPatterns.add("o>o!");
		inverseProperPartPatterns.add("o!o>");
		inverseProperPartPatterns.add("oooo");
		return inverseProperPartPatterns;
	}

	private static Set<String> getEqualsPatterns(){
		Set<String> equalsPatterns = new HashSet<String>(7, 1.0f);
		equalsPatterns.add("<!o>");
		equalsPatterns.add(">o!<");
		equalsPatterns.add("=!!=");
		equalsPatterns.add("!<>o");
		equalsPatterns.add("!==!");
		equalsPatterns.add("o><!");
		equalsPatterns.add("oooo");
		return equalsPatterns;
	}

	private static Set<String> getDisjointPatterns(){
		Set<String> disjointPatterns = new HashSet<String>(1, 1.0f);
		disjointPatterns.add("!!!!");
		return disjointPatterns;
	}

	private static Set<String> getOverlapsPatterns(){
		Set<String> overlapsPatterns = new HashSet<String>(63, 1.0f);
		overlapsPatterns.add("<!!>");
		overlapsPatterns.add("<!!!");
		overlapsPatterns.add("<!!o");
		overlapsPatterns.add("<!o>");
		overlapsPatterns.add("<!o!");
		overlapsPatterns.add("<!oo");
		overlapsPatterns.add(">!!<");
		overlapsPatterns.add(">!!!");
		overlapsPatterns.add(">!!o");
		overlapsPatterns.add(">o!<");
		overlapsPatterns.add(">o!!");
		overlapsPatterns.add(">o!o");
		overlapsPatterns.add("=!!!");
		overlapsPatterns.add("=!!o");
		overlapsPatterns.add("!<>!");
		overlapsPatterns.add("!<>o");
		overlapsPatterns.add("!<!!");
		overlapsPatterns.add("!<!o");
		overlapsPatterns.add("!<o!");
		overlapsPatterns.add("!<oo");
		overlapsPatterns.add("!><!");
		overlapsPatterns.add("!>!!");
		overlapsPatterns.add("!>o!");
		overlapsPatterns.add("!=!!");
		overlapsPatterns.add("!=o!");
		overlapsPatterns.add("!!<!");
		overlapsPatterns.add("!!>!");
		overlapsPatterns.add("!!>o");
		overlapsPatterns.add("!!=!");
		overlapsPatterns.add("!!!<");
		overlapsPatterns.add("!!!>");
		overlapsPatterns.add("!!!=");
		overlapsPatterns.add("!!!o");
		overlapsPatterns.add("!!o>");
		overlapsPatterns.add("!!o!");
		overlapsPatterns.add("!!oo");
		overlapsPatterns.add("!o<!");
		overlapsPatterns.add("!o>!");
		overlapsPatterns.add("!o>o");
		overlapsPatterns.add("!o=!");
		overlapsPatterns.add("!o!<");
		overlapsPatterns.add("!o!!");
		overlapsPatterns.add("!o!o");
		overlapsPatterns.add("!oo!");
		overlapsPatterns.add("!ooo");
		overlapsPatterns.add("o><!");
		overlapsPatterns.add("o>!!");
		overlapsPatterns.add("o>o!");
		overlapsPatterns.add("o!<!");
		overlapsPatterns.add("o!!<");
		overlapsPatterns.add("o!!>");
		overlapsPatterns.add("o!!=");
		overlapsPatterns.add("o!!!");
		overlapsPatterns.add("o!!o");
		overlapsPatterns.add("o!o>");
		overlapsPatterns.add("o!o!");
		overlapsPatterns.add("o!oo");
		overlapsPatterns.add("oo<!");
		overlapsPatterns.add("oo!<");
		overlapsPatterns.add("oo!!");
		overlapsPatterns.add("oo!o");
		overlapsPatterns.add("ooo!");
		overlapsPatterns.add("oooo");
		return overlapsPatterns;
	}
}
