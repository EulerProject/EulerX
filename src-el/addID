#! /usr/bin/env python
# __author__ = "Parisa Kianmajd"
#__version__ = "1.0.1"
# input: a csv file with three columns <Name, Author, Rank>
# output: the input file with one additional column, ID, with format of <groupID>.<rankID><number>


import csv
import sys
import wizardParser
import taxon_dictionary

def main (iFile, startNum):           
    inputData = []            
    data = {} # a nested dictionary to store the taxonomies

    
    for n in iFile:
        inputData += csv.DictReader(open(n)) 

    try:
        for row in inputData:
            author = row["Author"]
            rank = row["Rank"]
            if author not in data:
                data[author] = {}
            if rank not in data[author]:
                data[author][rank] = []
            data[author][rank].append(row["Name"])
    except ValueError, e:
        print "Error in the input file:", e
            
    with sys.stdout as oFile:
        writer = csv.writer(oFile)
        writer.writerow(["ID", "Name", "Author", "Rank"]) 
    # Assign identifiers to each entity
        j = startNum - 1
        # group elements based on Author column
        for author, value in data.iteritems():
            j += 1
            i = 1
            numRanks = []
            # map ranks to numerical value using taxon_dictionary
            for rank in value.keys():
                numRanks.append(taxon_dictionary.rank2num.get(rank,(0,0))[0])
            # sort elements based on rank number and alphabetically inside each rank group
            for rank in [k[0] for k in sorted(zip(value.keys(), numRanks), key=lambda l: l[1] ) ]:
                for name in sorted(value[rank]):
                    writer.writerow((str(j) + "." + str(taxon_dictionary.rank2num.get(rank,(0,0))[1]) + str(i), name, author, rank))
                    i += 1


# MAIN
if __name__ == '__main__':
    main(wizardParser.args.iFile, int(wizardParser.args.sNum))