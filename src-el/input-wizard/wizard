#! /usr/bin/env python
# __author__ = "Parisa Kianmajd"
#__version__ = "1.0.1"

import csv
import taxon_dictionary
import sys

data = {}

with sys.stdin as sFile:
    lines = csv.reader(sFile)
    next(lines, None) #skip header row
    # categorize the lines based on the first 4 letters of the name
    for line in lines:
        if line[1][0:4] not in data:
            data[line[1][0:4]]= []
        data[line[1][0:4]].append(line)
   
# compare the items in the list two by two to find possible pairs
for d in data:
# find the lowest rank elements (leaves) and make sure there exsits an articulation for each element in that rank
    leavesRank = max(taxon_dictionary.rank2num[i[3]][0] for i in data[d])
    for i in data[d]:    
        i.append(" ")
    for i in range(0,len(data[d])):
        art = []
        isa = []
        taxa1 = data[d][i]
        rank1 = taxon_dictionary.rank2num[taxa1[3]][0]
        for j in range(i+1, len(data[d])):
            taxa2 = data[d][j]
            rank2 = taxon_dictionary.rank2num[taxa2[3]][0] 
            g1 = taxa1[0].split(".")[0]
            g2 = taxa2[0].split(".")[0]
             #if the two taxas belong to different taxonomy groups
            if g1 != g2:
                # if they are both at species rank and the first 3 letters on their second half is the same
                if rank1 == 74 and rank2 == 74 and taxa1[1].split(" ")[1][0:3] == taxa2[1].split(" ")[1][0:3]:
                    art.append([taxa2[0],taxa2[1],taxa2[3]])
                    source = i
                elif art == [] and rank1 - rank2 >= 1:
                    art.append([taxa2[0],taxa2[1],taxa2[3]])
                    source = i
            else:
                if taxa2[4] == " " and ((rank2 == 74 and taxa2[1].split(" ")[0] == taxa1[1]) or (rank1 < rank2)):
                    isa.append([taxa2[0],taxa2[1],taxa2[3]])
                    taxa2[4] = "1"
        # if there are more than one suggested pair, pick the more accurate one
        if len(art)>1:
            closestMatch = max(taxon_dictionary.rank2num[a[2]][0] for a in art)
            for a in art:
                a2 = []
                if taxon_dictionary.rank2num[a[2]][0] == closestMatch:
                    a2.append(a)
                    taxa1.append(a2)
        else:
            taxa1.append(art)
        taxa1.append(isa)
with sys.stdout as dFile:
    writer = csv.writer(dFile)
    writer.writerow(["Id, Taxonomy", "TaxId", "Rank", "SciName", "Relation", "Id", "Taxonomy", "TaxId", "Rank", "SciName"])
    for d in data:
        for i in data[d]:
            if len(i[6]) >0:
                for p in i[6]:
                   writer.writerow([p[0],p[0].split(".")[0], p[0].split(".")[1][0],p[0].split(".")[1][1:], p[1] , "ISA", i[0],i[0].split(".")[0],i[0].split(".")[1][0],i[0].split(".")[1][1:],i[1]])
    writer.writerow([" "])
    for d in data:
        for i in data[d]:
        # if the taxa is at the lowest rank and yet has no suggested articulation, ask user to define the articulation for it
            if i[0].split(".")[0] == source:
                if artMate == [] and i[3] == leavesRank:
                    writer.writerow([i[0], i[1], " ", "?", "?"])
                else:
                    for a in artMate:
                        writer.writerow([i[0], i[0].split(".")[0], i[0].split(".")[1][0], i[0].split(".")[1][1:], i[1], "?",
                                         a[0], a[0].split(".")[0], a[0].split(".")[1][0], a[0].split(".")[1][1:], a[1]])