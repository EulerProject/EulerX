#! /usr/bin/env python
# __author__ = "Parisa Kianmajd"
#__version__ = "1.0.2"


import sys
import csv
import taxon_dictionary
from operator import itemgetter

# global variables
data = {}
isamap = {} 
artmap = {} 

with sys.stdin as source:
    lines = csv.reader(source)
    next(lines, None)   # skip header row
    # categorize the lines based on the first 4 letters of the name
    try:
        for line in lines:
            line[3] = taxon_dictionary.rank2num[line[3]][0] # translate the ranks 
            if line[1][0:4] not in data:
                data[line[1][0:4]]= []
            data[line[1][0:4]].append(line)
    except ValueError, e:
        print "Error in the input file:" , e
# compare the items in the list two by two to find possible ISA pairs
for d in data:
# find the lowest rank elements (leaves) and make sure there exsits an articulation for each element in that rank
    leavesRank = max(i[3] for i in data[d])
    for i in data[d]:    
        i.append(" ") # add an extra field for parent's information. This will be used to check if the element is already claimed as a child or not
    for i in range(len(data[d])):
        isa = []
        taxa1 = data[d][i]
        rank1 = taxa1[3]
        for j in range(i+1, len(data[d])):
            taxa2 = data[d][j]
            rank2 = taxa2[3]
            g1 = taxa1[0].split(".")[0]
            g2 = taxa2[0].split(".")[0]
             #if the two taxas belong to different taxonomy groups
            if g1 == g2:
                if taxa2[4] == " " and ((rank2 == 74 and taxa2[1].split(" ")[0] == taxa1[1]) or (rank1 < rank2)):
                    isa.append([taxa2[0],taxa2[1],taxa2[3]])
                    taxa2[4] = taxa1[0]
 #       taxa1.append(isa)
        isamap.update({taxa1[0]: isa})
# look for possible articulation pairs
for d in data:
    data[d] = sorted(data[d], key=itemgetter(3),reverse = True)  # articulations are defined from leaves to root
    for i in range(len(data[d])):
        art = []
        taxa1 = data[d][i]
        rank1 = taxa1[3]
        for j in range(i+1, len(data[d])):
            taxa2 = data[d][j]
            rank2 = taxa2[3] 
            g1 = taxa1[0].split(".")[0]
            g2 = taxa2[0].split(".")[0]
            if g1 != g2:
                # if they are both at species rank and the first 3 letters on their second half is the same
                if rank1 == 74 and rank2 == 74 and taxa1[1].split(" ")[1][0:3] == taxa2[1].split(" ")[1][0:3]:
                    art.append([taxa2[0],taxa2[1],taxa2[3]])
                    source = i
                elif art == [] and rank1 - rank2 >= 1:
                    art.append([taxa2[0],taxa2[1],taxa2[3]])
                    source = i
                elif rank1 == rank2: # if the two taxas are on the same rank and no articulation is defined between their childern
                    for i in isamap[taxa1[0]]:
                        for j in isamap[taxa2[0]]:
                            if i[0] in artmap and j[0] in artmap:
                               if i not in artmap[j[0]] and j not in artmap[i[0]] and [taxa2[0],taxa2[1],taxa2[3]] not in artmap[i[0]] and [taxa1[0],taxa1[1],taxa1[3]] not in artmap[j[0]]:
                                   art.append([taxa2[0],taxa2[1],taxa2[3]])
        # if there are more than one suggested pair, pick the more accurate one
        if len(art)>1:
            closestMatch = max(a[2] for a in art)
            for a in art:
                a2 = []
                if a[2] == closestMatch:
                    a2.append(a)
                    taxa1.append(a2)
                    artmap.update({taxa1[0]: a2})
        else:
#            taxa1.append(art)
            artmap.update({taxa1[0]: art})
with sys.stdout as dest:
    writer = csv.writer(dest)
    writer.writerow(["Id, Taxonomy", "TaxId", "Rank", "SciName", "Relation", "Id", "Taxonomy", "TaxId", "Rank", "SciName"])
    for d in data:
        for i in data[d]:
            isaMates = isamap.get(i[0],[])
            for p in isaMates:
                writer.writerow([p[0],p[0].split(".")[0], p[0].split(".")[1][0],p[0].split(".")[1][1:], p[1] , "ISA", i[0],i[0].split(".")[0],i[0].split(".")[1][0],i[0].split(".")[1][1:],i[1]])
    writer.writerow([" "])
    for d in data:
        for i in data[d]:
            artMate = artmap.get(i[0],[])
        # if the taxa is at the lowest rank and yet has no suggested articulation, ask user to define the articulation for it
            if i[0] == source and artMate == [] and i[3]== leavesRank:
                writer.writerow([i[0], i[1], " ", "?","?"])
            else:
                for a in artMate:
                    writer.writerow([i[0],i[0].split(".")[0], i[0].split(".")[1][0],i[0].split(".")[1][1:], i[1] , "?", a[0],a[0].split(".")[0],a[0].split(".")[1][0],a[0].split(".")[1][1:],a[1]])