import os
import signal, time
from utility import *
#from config import *

class TimedOut(Exception):
    def __init__(self, value = "timed out"):
        self.value = value
    def __str__(self):
        return repr(self.value)
    
class Reasoner:

    name = ""
    path = ""
    timeout = 0
    
    def __init__(self, reasonerPath, timeout):
        self.timeout = timeout
        if (os.environ.has_key("OS") and ((os.environ["OS"]).index("Windows") != -1)):
          reasonerPath = quoteSpacesInPath(reasonerPath)
          
        path = reasonerPath + self.name + " -t " + str(timeout)
        if (self.name == "mace4"):
          path = path + " -N 200 -b 2000 "
        path = path + " -f "
        print "path: " + path + "\n"
        self.path = path
        
    def run(self,input):
        
        def handler(signum, frame):
            raise TimedOut()
        # top version linux, bottom version windoze.
        #program = os.popen(self.path + " " + input, "r")
        #program = os.popen(self.path.replace("Documents and Settings", "\"Documents and Settings\"") + " " + input.replace("Documents and Settings", "\"Documents and Settings\""), "r")
        runPath = self.path
        origInput = input
        
        if (os.environ.has_key("OS") and ((os.environ["OS"]).index("Windows") != -1)):
            input = quoteSpacesInPath(input)
   
        old = signal.signal(signal.SIGALRM, handler)
        signal.alarm(120)
        result = ""
        outputFileName = ""
        try:
            outFile, inFile, errFile = os.popen3(runPath + " " + input)
        
            output = inFile.read()
            outputFileName = self.saveOutput(origInput, output)
            result = self.parseOutput(output)
        except TimedOut:
	    print "timed out homey!\n"
            result = self.name + " forced timeout";
        #finally:
        signal.signal(signal.SIGALRM, old)

        signal.alarm(0)
        return [result, outputFileName]
                
    def formatInputFile(self, input):
        result = "formulas(assumptions).\n"
        result += input
        result += "end_of_list.\n\n"    
        return result
    
    def setTimeout(self, timeout):
        self.timeout = timeout

    def saveOutput(self, inputFileName, output):
        printName = self.name.replace(" ","_")
        outputFileName = inputFileName.replace(".txt", "_" + printName + "_output.txt")
        outputFileName = cleanOutputFileName(outputFileName)
        outputFile = open(outputFileName, "w")
        outputFile.write(output)
        outputFile.close()
        return outputFileName
    
class Mace4(Reasoner):
    name = "mace4"
    
    def parseOutput(self, output):
      #print "mace output " + output
      if (output.find("MODEL") != -1):
          return "model found"
      elif (output.find("max_sec_no") != -1):
          return "timeout"
      else:
          return "false"
      
    def formatGoalFile(self, input):
        result = "formulas(assumptions).\n"
        result += input 
        result += "end_of_list.\n"    
        return result

      
class Prover9(Reasoner):
    name = "prover9"
    
        
    def parseOutput(self, output):
      #print "prover output " + output
      #if (output.find("THEOREM PROVED") == -1):
      if (output.find("PROOF") == -1):
          return "not proved"
      elif (output.find("max_sec_no") != -1):
          return "timeout"
      else:
          return "proved"
      
    def formatGoalFile(self, input):
        result = "formulas(goals).\n"
        result += input 
        result += "end_of_list.\n"    
        return result
